---
interface Category {
  id: string;
  name: string;
  slug: string;
  color: string;
}

interface Props {
  categories: Category[];
  selectedCategory?: string;
}

const { categories, selectedCategory } = Astro.props;
---

<div class="category-filter mb-8">
  <div class="flex flex-wrap gap-3">
    <button 
      class={`filter-btn px-6 py-2 rounded-full font-medium transition-all duration-300 transform hover:scale-105 ${
        !selectedCategory 
          ? 'bg-primary-500 text-white shadow-md scale-105' 
          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
      }`}
      data-category=""
    >
      Todos
    </button>
    
    {categories.map(category => (
      <button 
        class={`filter-btn px-6 py-2 rounded-full font-medium transition-all duration-300 transform hover:scale-105 ${
          selectedCategory === category.slug
            ? 'text-white shadow-md scale-105'
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
        }`}
        style={selectedCategory === category.slug ? `background-color: ${category.color}` : ''}
        data-category={category.slug}
      >
        {category.name}
      </button>
    ))}
  </div>
</div>

<!-- Loading overlay for smooth transitions -->
<div id="loading-overlay" class="fixed inset-0 bg-white/80 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300">
  <div class="flex items-center justify-center h-full">
    <div class="flex items-center space-x-2">
      <div class="w-2 h-2 bg-primary-500 rounded-full animate-bounce"></div>
      <div class="w-2 h-2 bg-primary-500 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
      <div class="w-2 h-2 bg-primary-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
    </div>
  </div>
</div>

<script>
  let isTransitioning = false;
  
  document.addEventListener('click', (e) => {
    const button = (e.target as Element)?.closest('.filter-btn');
    if (!button || isTransitioning) return;
    
    const category = button.getAttribute('data-category');
    const url = new URL(window.location.href);
    
    // Check if this is already the current category
    const currentCategory = url.searchParams.get('category') || '';
    if (category === currentCategory) return;
    
    // Start transition
    isTransitioning = true;
    
    // Show loading overlay
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
      loadingOverlay.style.opacity = '1';
      loadingOverlay.style.pointerEvents = 'auto';
    }
    
    // Add fade out effect to current content
    const wallpaperGrid = document.querySelector('.wallpaper-grid');
    if (wallpaperGrid) {
      wallpaperGrid.style.opacity = '0.5';
      wallpaperGrid.style.transform = 'translateY(10px)';
    }
    
    // Update URL and navigate after a short delay for smooth transition
    setTimeout(() => {
      if (category) {
        url.searchParams.set('category', category);
      } else {
        url.searchParams.delete('category');
      }
      
      window.location.href = url.toString();
    }, 200);
  });

  // Handle page load - fade in content
  document.addEventListener('DOMContentLoaded', () => {
    const wallpaperGrid = document.querySelector('.wallpaper-grid');
    if (wallpaperGrid) {
      wallpaperGrid.style.opacity = '1';
      wallpaperGrid.style.transform = 'translateY(0)';
    }
  });
</script>

<style>
  .filter-btn {
    position: relative;
    overflow: hidden;
  }
  
  .filter-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  
  .filter-btn:hover::before {
    left: 100%;
  }
  
  /* Smooth bounce animation for loading dots */
  @keyframes bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }
  
  .animate-bounce {
    animation: bounce 1.4s infinite ease-in-out both;
  }
</style>