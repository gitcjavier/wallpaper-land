---
import WallpaperCard from './WallpaperCard.astro';

interface Wallpaper {
  id: string;
  title: string;
  description: string;
  thumbnail_url: string;
  image_url: string;
  category: {
    name: string;
    color: string;
  } | null;
  download_count: number;
  width: number;
  height: number;
}

interface Props {
  wallpapers: Wallpaper[];
}

const { wallpapers } = Astro.props;
---

<div class="wallpaper-grid transition-all duration-500 ease-out" style="opacity: 0; transform: translateY(20px);">
  {wallpapers.length === 0 ? (
    <div class="col-span-full text-center py-16">
      <div class="mx-auto w-24 h-24 text-gray-300 mb-4">
        <svg fill="currentColor" viewBox="0 0 24 24" class="animate-pulse">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-gray-900 mb-2">No se encontraron wallpapers</h3>
      <p class="text-gray-500">Intenta cambiar los filtros o buscar con otros t√©rminos.</p>
      <button 
        onclick="window.location.href = '/'"
        class="mt-4 inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
      >
        Ver todos los wallpapers
      </button>
    </div>
  ) : (
    wallpapers.map((wallpaper, index) => (
      <div 
        class="wallpaper-item animate-fade-in-up" 
        style={`animation-delay: ${index * 0.05}s`}
      >
        <WallpaperCard wallpaper={wallpaper} />
      </div>
    ))
  )}
</div>

<script>
  // Animate grid on load
  document.addEventListener('DOMContentLoaded', () => {
    const grid = document.querySelector('.wallpaper-grid');
    if (grid) {
      setTimeout(() => {
        grid.style.opacity = '1';
        grid.style.transform = 'translateY(0)';
      }, 100);
    }
  });

  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
      }
    });
  }, observerOptions);

  // Observe wallpaper items
  document.querySelectorAll('.wallpaper-item').forEach(item => {
    observer.observe(item);
  });
</script>

<style>
  .wallpaper-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }
  
  @media (max-width: 640px) {
    .wallpaper-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1rem;
    }
  }

  .wallpaper-item {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .wallpaper-item.animate-in {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Staggered animation for grid items */
  .wallpaper-item:nth-child(1) { animation-delay: 0.05s; }
  .wallpaper-item:nth-child(2) { animation-delay: 0.1s; }
  .wallpaper-item:nth-child(3) { animation-delay: 0.15s; }
  .wallpaper-item:nth-child(4) { animation-delay: 0.2s; }
  .wallpaper-item:nth-child(5) { animation-delay: 0.25s; }
  .wallpaper-item:nth-child(6) { animation-delay: 0.3s; }
  .wallpaper-item:nth-child(7) { animation-delay: 0.35s; }
  .wallpaper-item:nth-child(8) { animation-delay: 0.4s; }
  .wallpaper-item:nth-child(9) { animation-delay: 0.45s; }
  .wallpaper-item:nth-child(10) { animation-delay: 0.5s; }
  .wallpaper-item:nth-child(11) { animation-delay: 0.55s; }
  .wallpaper-item:nth-child(12) { animation-delay: 0.6s; }

  /* Smooth hover effects */
  .wallpaper-item:hover {
    transform: translateY(-5px) scale(1.02);
  }
</style>